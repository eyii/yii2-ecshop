<?php

namespace common\models\guanli_dingdan;

use common\models\guanli_shangpin\AttributeModel;
use common\models\guanli_shangpin\GoodsAttrModel;
use common\models\guanli_shangpin\GoodsModel;
use common\models\guanli_shangpin\MemberPriceModel;
use common\models\guanli_shangpin\ProductsModel;
use common\models\shangpin_guanli\GroupGoodsModel;
use Yii;
use yii\db\StaleObjectException;
use yii\helpers\Url;

/**
购物车购物信息记录表
 *
 * @property string $rec_id
 * @property string $user_id
 * @property string $session_id
 * @property string $goods_id
 * @property string $goods_sn
 * @property string $goods_name
 * @property string $market_price
 * @property string $goods_price
 * @property integer $goods_number
 * @property string $goods_attr
 * @property integer $is_real
 * @property string $extension_code
 * @property string $parent_id
 * @property integer $rec_type
 * @property integer $is_gift
 * @property integer $can_handsel
 * @property integer $goods_attr_id
 */
class CartModel extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%cart}}';
    }

    /**
     * 计算促销价格
     * @param $goods_id
     */
    private static function JSSPCuxiaoJiage($goods_id)
    {
    }

    /**
     * @return array
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
            'new' => ['goods_id', 'session_id', 'content'],

        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'goods_id', 'product_id', 'goods_number', 'is_real', 'parent_id', 'rec_type', 'is_gift', 'is_shipping', 'can_handsel'], 'integer'],
            [['market_price', 'goods_price'], 'number'],
            [['goods_attr'], 'required'],
            [['goods_attr'], 'string'],
            [['session_id'], 'string', 'max' => 32],
            [['goods_sn'], 'string', 'max' => 60],
            [['goods_name'], 'string', 'max' => 120],
            [['extension_code'], 'string', 'max' => 30],
            [['goods_attr_id'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'rec_id' => Yii::t('app', '自增ID号'),
            'user_id' => Yii::t('app', '用户登录id，取自session，'),
            'session_id' => Yii::t('app', 'sessionid'),//登录的sessionid，如果该用户退出，该sessionid对应的购物车中的所有记录都将被删除
            'goods_id' => Yii::t('app', '商品的id'),//，取自表goods的goods_id
            'goods_sn' => Yii::t('app', '商品货号'),//，取自表goods的goods_sn
            'goods_name' => Yii::t('app', '商品名称'),//，取自表goods的goods_name
            'market_price' => Yii::t('app', '商品市场价'),//，取自表goods的market_price
            'goods_price' => Yii::t('app', '商品的本店价'),//，取自表goods的shop_price
            'goods_number' => Yii::t('app', '购买数量'),//商品的购买数量，在购物车时，实际库存不减少
            'goods_attr' => Yii::t('app', '商品的属性，中括号里是该属性特有的价格'),
            'is_real' => Yii::t('app', '是否是实物'), //是否是实物 取自ecs_goods的is_real
            'extension_code' => Yii::t('app', '商品的扩展属性'), //，取自ecs_goods的extension_code
            'parent_id' => Yii::t('app', '父商品id'), //该商品的父商品id，没有该值为0，有的话那该商品就是该id的配件
            'rec_type' => Yii::t('app', '购物车商品类型'),//购物车商品类型，普通0，；团够1，；拍卖2，；夺宝奇兵3，
            'is_gift' => Yii::t('app', '是否是赠品'),//，0，否；其他，是参加优惠活动的id，取值于ecs_favourable_activity 的act_id
            'can_handsel' => Yii::t('app', 'Can Handsel'),
            'goods_attr_id' => Yii::t('app', '商品属性id'),//该商品的属性的id，取自goods_attr的goods_attr_id，如果有多个，只记录了最后一个，可能是个bug
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGoodsModel(){
        return $this->hasOne(GoodsModel::className(),['goods_id'=>'goods_id']);
    }

    /**
     * @param $goods_id
     */
    public function JiarusGouwuche($goods_id){
         $sql = "SELECT a.attr_id, a.attr_name, a.attr_type, ".
            "g.goods_attr_id, g.attr_value, g.attr_price " .
            'FROM ' .GoodsAttrModel::tableName(). ' AS g ' .
            'LEFT JOIN ' .AttributeModel::tableName() . ' AS a ON a.attr_id = g.attr_id ' .
            "WHERE a.attr_type != 0 AND g.goods_id = '" . $goods_id . "' " .
            'ORDER BY a.sort_order, g.attr_price, g.goods_attr_id';

       $model= Yii::$app->getDb()->createCommand($sql);
    }

    /**
     * 清空购物车
     * @param   int     $type   类型：默认普通商品
     */
   public static function QKCart($seesion_id, $type=0)
    {
        return CartModel::deleteAll(['session_id'=>$seesion_id,'rec_type'=>$type]);
    }

    /**
     * 添加商品到购物车
     *
     * @access  public
     * @param   integer $goods_id   商品编号
     * @param   integer $num        商品数量
     * @param   array   $spec       规格值对应的id数组
     * @param   integer $parent     基本件
     * @return  boolean
     */
    public static function JRGouwuche($goods_id, $session_id, $num = 1, $spec = array(), $parent = 0)
    {
        //检查商品参数 返回GoodsModel
        $goods_model=self::JCSPCanshu($goods_id,$num);
        if($goods_model[1]!==1){
            return $goods_model;
        }else{
            $goods_model=$goods_model[2];
        }
    /* 计算促销价格 */
        self::JSSPCuxiaoJiage($goods_id);

        //取购物车某用户的商品
         $cart_model= CartModel::find()->select(['goods_number'])
            ->where(['session_id'=>$session_id,'rec_type'=>0,'parent_id'=>0,'goods_id'=>$goods_id])
            ->asArray()->all();

        /* if(商品in 购物车) */
        if ($cart_model!=null){
                        /*更新*/
            return   self::GXCart($goods_id, $session_id,$num, $spec,$goods_model,$parent);
        }else{
            /*新增*/
          return  self::XZCart($goods_id, $session_id,$num, $spec,$goods_model,$parent);
        }

    }

    /**
     * 更新购物车
     * @param $goods_id
     * @param $session_id
     * @param int $num
     * @param array $spec
     * @param $goods_model
     * @param int $parent
     * @return array
     */
    private static function GXCart($goods_id, $session_id, $num = 1, $spec = array(), $goods_model, $parent = 0){
        $cart_model=CartModel::find()->where([
            'session_id'=>$session_id,
            'goods_id'=>$goods_id,
            'parent_id'=>0,
            'rec_type'=>0])->one();
        $cart_model->goods_number+=$num;
        $cart_model->goods_price=$goods_model['shop_price'];
        if ($cart_model->save()){
            return ['添加购物车成功,是否去付款?', 1, Url::toRoute(['gouwuche/index'],true)];
        }else{
            return ['更新购物车失败', -1, $cart_model->getErrors()];
        }
    }

    /**
     * 新增购物车
     * @param $goods_id
     * @param $session_id
     * @param int $num
     * @param array $spec
     * @param $goods_model
     * @param int $parent
     * @return array
     */
    private static function XZCart($goods_id, $session_id, $num = 1, $spec = array(), $goods_model, $parent = 0){
        //取指定规格的货品信息
        $goods_attr= self::HBGoodsAttr($goods_id,  $num, $spec);
        $goods_attr_ids=is_array($spec)?implode(',',$spec):"-1";
        //保存到购物车里
           $cart_model= new CartModel();
        $cart_model->setAttributes([
                'session_id'=>$session_id,
                'goods_id'=>$goods_id,
                'goods_price'=>$goods_model['shop_price'],
                'market_price'=>$goods_model['market_price'],
                'is_real'=>$goods_model['is_real'],
                'goods_number'=>$num,
                'parent_id'=>0,
                'rec_type'=>0,
                'goods_attr'=>$goods_attr,
                'extension_code'=>'0',
                'goods_attr_id'=>$goods_attr_ids,
                'goods_name'=>$goods_model['goods_name'],
                'goods_sn'=>$goods_model['goods_sn'],
                'user_id'=>Yii::$app->user->id!=null?Yii::$app->user->id:'0',
            ]);
        if($cart_model->save()){
            return ['添加购物车成功', 1,Url::toRoute(['gouwuche/index'],true)];
        }else{
            return ['添加购物车失败', -1,  $cart_model->getErrors()];
        }
    }

    /**
     * 循环组合商品属性
     * @param $goodsattr_model
     * @return string
     */
    public static function ZuheGoodsAttr($goodsattr_model){
        $goods_attr='';
        //循环组合商品属性
        foreach ($goodsattr_model as $item){
            $goods_attr.=$item['attr_name'].':'.$item['attr_value'];
            if(isset($item['attr_price'])&&$item['attr_price']!=null){
                $goods_attr.='['.$item['attr_price'].']';
            }
            $goods_attr.='||';
        }
        return   $goods_attr;
    }

    /**
     * 读取attribute goods_attr表
     * @param $goods_id
     * @param int $num
     * @param array $spec
     * @return string
     */
    public static function HBGoodsAttr($goods_id, $num = 1, $spec = array()){
        $goods_attr='-1';
        if ($spec!=null&&(!empty($spec))){
            $goodsattr_model=GoodsAttrModel::find()->alias('ga') ->select(['a.attr_name','ga.attr_value','ga.attr_price','a.attr_id',]) ->joinWith('attributeModel a')
                ->where(['in','ga.goods_attr_id',$spec])
                ->andWhere(['ga.goods_id'=>$goods_id])
                ->asArray()->all();
           //循环组合商品属性
            $goods_attr=self::ZuheGoodsAttr($goodsattr_model);
        }
        return $goods_attr;
    }
    /**
     * 传入商品参数与GoodsModel做比较
     * @param $goods_id
     * @param $num
     * @return array
     */
    public static function JCSPCanshu($goods_id, $num){
        ///1取得商品信息
         $goods_model=GoodsModel::find()->alias('g')->joinWith('goodsAttrModel as ga')->where(['g.goods_id'=>$goods_id])->asArray()->one();
        //得到的结果是空的
        if ($goods_model===null){
            return ['此商品不存在', -1, null];
        }
        /* 是否正在销售 */
        if($goods_model['is_on_sale']==0) {
            return ['对不起该商品已经下架', -2, null];
        }
        /* 不是配件时检查是否允许单独销售is_alone_sale */
        if($goods_model['is_alone_sale']==0) {
            return ['对不起该商品不能单独销售', -3, null];
        }
        /* 如果商品有规格则取规格商品信息 配件除外 */
        $prod = ProductsModel::find()->where(['goods_id'=>$goods_id])->one();
        /* 检查：库存 */

        //检查：商品购买数量是否大于总库存
        if ($num>$goods_model['goods_number']){
            return ['对不起，该商品已经库存不足暂停销售。你现在要进行缺货登记来预订该商品吗？', -1, null];
        }
        return ['成功',1,$goods_model];
    }
    /**
     * 得到新发货单号
     * @return  string
     */
    function get_delivery_sn()
    {
        /* 选择一个随机的方案 */
        mt_srand((double) microtime() * 1000000);
        return date('YmdHi') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT);
    }


}
